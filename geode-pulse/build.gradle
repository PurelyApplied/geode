import org.apache.geode.gradle.TestPropertiesWriter

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'war'

dependencies {
  compile('org.springframework:spring-beans')

  // Needed to fully use log4j instead of commons-logging.
  compile('org.apache.logging.log4j:log4j-jcl')
  compile('org.apache.logging.log4j:log4j-api')
  compile('org.apache.logging.log4j:log4j-core')

  compile('commons-beanutils:commons-beanutils')
  compile('commons-collections:commons-collections')
  compile('commons-digester:commons-digester')
  compile('commons-lang:commons-lang')
  compile('org.springframework.ldap:spring-ldap-core')
  runtime('org.springframework:spring-expression')

  // added only to ensure common version with other geode modules
  runtime('org.slf4j:slf4j-api')

  compile('org.springframework.security:spring-security-config')
      {
        exclude module: 'aopalliance'
        exclude module: 'spring-expression'
      }
  compile('org.springframework.security:spring-security-ldap')
      {
        exclude module: 'aopalliance'
        exclude module: 'spring-asm'
        exclude module: 'spring-expression'
        exclude module: 'spring-jdbc'
      }
  compile('org.springframework.security:spring-security-web')
      {
        exclude module: 'aopalliance'
        exclude module: 'spring-asm'
        exclude module: 'spring-expression'
        exclude module: 'spring-jdbc'
      }
  compile('org.springframework:spring-context');
  compile('org.springframework:spring-web');
  runtime('org.springframework:spring-webmvc')
      {
        exclude module: 'aopalliance'
        exclude module: 'aspectjweaver'
      }
  compile('org.springframework:spring-tx')
  compile('com.fasterxml.jackson.core:jackson-annotations')
  compile('com.fasterxml.jackson.core:jackson-core')
  compile('com.fasterxml.jackson.core:jackson-databind')

  providedCompile('commons-logging:commons-logging:' + project.'commons-logging.version')

  compileOnly('org.mortbay.jetty:servlet-api')


  testCompile project(':geode-junit')
  testCompile project(':geode-core')
  testCompile('org.springframework:spring-test')


  integrationTestCompile project(':geode-junit')
  integrationTestCompile project(':geode-core')
  integrationTestCompile project(':geode-pulse:geode-pulse-test')
  integrationTestCompile('org.springframework:spring-test')


  uiTestCompile project(':geode-junit')
  uiTestCompile project(':geode-json')
  uiTestCompile project(':geode-pulse:geode-pulse-test')
  uiTestCompile('org.seleniumhq.selenium:selenium-remote-driver')

  uiTestRuntime project(':geode-core')
}

def generatedResources = "$buildDir/generated-resources/main"

sourceSets {
  main {
    output.dir(generatedResources, builtBy: 'copyGemFireVersionFile')
  }

  integrationTest {
    resources {
      srcDir 'src/main/webapp/WEB-INF'
    }
  }
}

task copyGemFireVersionFile(type: Copy) {
  from project(':geode-core').createVersionPropertiesFile
  into generatedResources
}

eclipse.classpath.file {
  whenMerged { classpath ->
    classpath.entries.removeAll { entry -> entry.path.contains('geode-core/build') }
  }
}
idea.module.iml {
  whenMerged { module ->
    module.dependencies.removeAll { entry -> entry.toString().contains('geode-core/build') }
  }
}

artifacts {
  archives war
}

war {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  classpath configurations.runtime
  classpath project(':geode-core').webJar.archivePath
}
war.dependsOn(':geode-core:webJar')
uiTest.dependsOn war
uiTest.finalizedBy rootProject.combineReports
rootProject.combineReports.mustRunAfter uiTest

