/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


apply plugin: 'antlr'
apply plugin: 'me.champeau.gradle.jmh'

sourceSets {
  jca {
    compileClasspath += configurations.compile
    runtimeClasspath += configurations.runtime
  }
}

idea {
  module {
    testSourceDirs += project.tasks.generateIntegrationTestGrammarSource.outputs.files
    testSourceDirs += project.tasks.generateDistributedTestGrammarSource.outputs.files
    testSourceDirs += project.tasks.generatePerformanceTestGrammarSource.outputs.files
    testSourceDirs += project.tasks.generateUpgradeTestGrammarSource.outputs.files
  }
}

configurations {
  //declaring new configuration that will be used to associate with artifacts
  archives
}

dependencies {
  // Source Dependencies
  antlr('antlr:antlr:' + project.'antlr.version')

  // External
  compileOnly files("${System.getProperty('java.home')}/../lib/tools.jar")
  compile('com.github.stephenc.findbugs:findbugs-annotations')
  compile('org.jgroups:jgroups')
  compile('antlr:antlr')
  compile('com.fasterxml.jackson.core:jackson-annotations')
  compile('com.fasterxml.jackson.core:jackson-databind')
  compile('commons-io:commons-io')
  compile('commons-validator:commons-validator')
  compile('commons-digester:commons-digester')

  compile('commons-lang:commons-lang')
  compile('commons-modeler:commons-modeler')
      {
        exclude module: 'commons-digester'
        exclude module: 'commons-logging-api'
        exclude module: 'mx4j-jmx'
        exclude module: 'xml-apis'
        ext.optional = true
      }
  compile('io.netty:netty-all')
      {
        ext.optional = true
      }
  compile('it.unimi.dsi:fastutil')
  compile('javax.mail:javax.mail-api')
      {
        ext.optional = true;
      }
  compile('javax.resource:javax.resource-api')
  compile('mx4j:mx4j')
      {
        ext.optional = true;
      }
  compile('mx4j:mx4j-remote')
      {
        ext.optional = true;
      }
  compile('mx4j:mx4j-tools')
      {
        ext.optional = true;
      }
  compile('net.java.dev.jna:jna')

  compile('net.sf.jopt-simple:jopt-simple')

  compile('org.apache.logging.log4j:log4j-api')
  compile('org.apache.logging.log4j:log4j-core')
  runtime('org.fusesource.jansi:jansi')
      {
        ext.optional = true
      }
  runtime('org.slf4j:slf4j-api')

  runtime('org.apache.logging.log4j:log4j-slf4j-impl')
      {
        exclude module: 'slf4j-api'
        ext.optional = true
      }
  runtime('org.apache.logging.log4j:log4j-jcl')
      {
        ext.optional = true
      }
  runtime('org.apache.logging.log4j:log4j-jul')
      {
        ext.optional = true
      }
  compile('org.eclipse.jetty:jetty-webapp')
      {
        ext.optional = true
      }
  compileOnly('org.springframework:spring-webmvc')
      {
        exclude module: 'aopalliance'
        exclude module: 'spring-aop'
        ext.optional = true
      }
  testCompile('org.springframework:spring-webmvc')
      {
        exclude module: 'aopalliance'
        exclude module: 'spring-aop'
        ext.optional = true
      }
  compile('org.springframework:spring-core')
      {
        ext.optional = true
      }
  compile('org.springframework.shell:spring-shell')
      {
        exclude module: 'aopalliance'
        exclude module: 'asm'
        exclude module: 'cglib'
        exclude module: 'guava'
        exclude module: 'spring-aop'
        exclude module: 'spring-context-support'
        ext.optional = true
      }
  compile('org.iq80.snappy:snappy')
      {
        ext.optional = true
      }

  compile('org.apache.shiro:shiro-core')

  compile('io.github.classgraph:classgraph')

  compile('com.healthmarketscience.rmiio:rmiio')

  compile project(':geode-common')
  compile project(':geode-json')


  jcaAnnotationProcessor('org.apache.logging.log4j:log4j-core:' + project.'log4j.version')


  jcaCompile sourceSets.main.output


  testCompile project(':geode-junit')
  testCompile project(':geode-concurrency-test')
  testCompile('org.apache.bcel:bcel')
  testCompile('org.mockito:mockito-core')
  testCompile('org.springframework:spring-test')
  testCompile('com.pholser:junit-quickcheck-core')
  testCompile files("${System.getProperty('java.home')}/../lib/tools.jar")

  testRuntime('commons-collections:commons-collections')
  testRuntime('commons-configuration:commons-configuration')
  testRuntime('commons-io:commons-io')
  testRuntime('commons-validator:commons-validator')
  testRuntime('com.pholser:junit-quickcheck-generators')


  integrationTestCompile(project(":geode-dunit")) {
    exclude module: 'geode-core'
  }
  integrationTestCompile project(':geode-concurrency-test')
  integrationTestCompile('redis.clients:jedis')
  integrationTestCompile('org.apache.bcel:bcel')
  integrationTestCompile('org.springframework:spring-test')
  integrationTestCompile('net.spy:spymemcached')
  integrationTestCompile('pl.pragmatists:JUnitParams')

  integrationTestRuntime('org.apache.derby:derby')
  integrationTestRuntime('xerces:xercesImpl')


  distributedTestCompile project(":geode-dunit")
  distributedTestCompile('redis.clients:jedis')
  distributedTestCompile('pl.pragmatists:JUnitParams')
  distributedTestCompile('com.jayway.jsonpath:json-path-assert')

  distributedTestRuntime('org.apache.derby:derby')


  upgradeTestCompile(project(":geode-dunit")) {
    exclude module: 'geode-core'
  }


  performanceTestCompile project(":geode-junit")
}

def generatedResources = "$buildDir/generated-resources/main"

sourceSets {
  main {
    output.dir(generatedResources, builtBy: 'createVersionPropertiesFile')
  }
  test {
    output.dir(generatedResources, builtBy: 'createVersionPropertiesFile')
  }
}

jmh {
  include = project.hasProperty('include') ? project.getProperties().get('include') : '.*'
  duplicateClassesStrategy = 'warn'
}

dependencies {
  // Integration Tests
  integrationTestCompile sourceSets.test.output

  // Distributed Tests
  distributedTestCompile sourceSets.integrationTest.output
}

// Creates the version properties file and writes it to the classes dir
task createVersionPropertiesFile {

  def propertiesFile = file(generatedResources + "/org/apache/geode/internal/GemFireVersion.properties");
  // Allow this step to be skipped.
  onlyIf {
    // Project properties are parsed as strings.
    // Use boolean comparison, not the value itself, to determine truth.
    !propertiesFile.exists() || sourceRevision != "unknown"
  }
  // onlyIf takes precedence, but we should generate the file whenever the revision is specified.
  outputs.upToDateWhen { false }
  outputs.files {
    propertiesFile
  }

  doLast {
    def props = [
        "Product-Name"      : productName,
        "Product-Version"   : version,
        "Build-Id"          : "${System.env.USER} ${buildId}".toString(),
        "Build-Date"        : new Date().format('yyyy-MM-dd HH:mm:ss Z'),
        "Build-Platform"    : (
            "${System.properties['os.name']} " +
                "${System.properties['os.version']} " +
                "${System.properties['os.arch']}".toString()),
        "Build-Java-Version": System.properties['java.version'],
        'Source-Repository' : sourceRepository,
        'Source-Revision'   : sourceRevision,
        'Source-Date'       : new Date().format('yyyy-MM-dd HH:mm:ss Z')
    ] as Properties
    propertiesFile.getParentFile().mkdirs()
    new FileOutputStream(propertiesFile).withStream { fos ->
      props.store(fos, '')
    }
  }
}

jar {

  from sourceSets.main.output
  from sourceSets.jca.output

  exclude 'org/apache/geode/management/internal/web/**'
  exclude 'org/apache/geode/internal/i18n/StringIdResourceBundle_ja.txt'
  exclude 'org/apache/geode/admin/doc-files/ds4_0.dtd'
}

jar.dependsOn(createVersionPropertiesFile)

task webJar(type: Jar, dependsOn: classes) {
  description 'Assembles the jar archive containing the gemfire management web classes.'
  from sourceSets.main.output
  baseName 'geode-web'
  include 'org/apache/geode/management/internal/web/**'
}

task raJar(type: Jar, dependsOn: classes) {
  description 'Assembles the jar archive that contains the JCA classes'
  from sourceSets.jca.output
  exclude 'org/apache/geode/ra/**'
  archiveName 'ra.jar'
}

task jcaJar(type: Jar, dependsOn: raJar) {
  description 'Assembles the jar archive that contains the JCA bundle'
  baseName 'geode-jca'
  extension 'rar'
  metaInf { from 'src/jca/ra.xml' }
  from raJar.archivePath
}

configurations {
  classesOutput {
    extendsFrom compile
    description 'a dependency that exposes the compiled classes'
  }
}

dependencies {
  classesOutput sourceSets.main.output
}

tasks.eclipse.dependsOn(generateGrammarSource)

distributedTest {
  // Some tests have inner tests that should be ignored
  exclude "**/*\$*.class"
}
